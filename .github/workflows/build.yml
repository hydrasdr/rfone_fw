# Copyright (c) 2025, Benjamin Vernoux <bvernoux@hydrasdr.com>
# 
# This workflow is licensed exclusively for HydraSDR products and related development.
# Unauthorized use, modification, or distribution for non-HydraSDR products is prohibited.
# All rights reserved.
#
# HydraSDR RFOne Firmware Build and Release Workflow
# For more information about HydraSDR products: https://hydrasdr.com

name: Build HydraSDR RFOne Firmware

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Cache GCC ARM toolchain
      uses: actions/cache@v4
      id: cache-gcc-arm
      with:
        path: ~/gcc-arm-none-eabi-4_7-2013q3
        key: gcc-arm-none-eabi-4_7-2013q3-ubuntu-24.04
    
    - name: Install system dependencies
      run: |
        echo "Checking pre-installed packages..."
        MISSING_PACKAGES=""
        
        for pkg in gcc-multilib git dfu-util python3 python3-pip zip unzip curl jq; do
          if ! dpkg -l | grep -q "^ii  $pkg "; then
            MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
          else
            echo "✓ $pkg already installed"
          fi
        done
        
        if [ -n "$MISSING_PACKAGES" ]; then
          echo "Installing missing packages:$MISSING_PACKAGES"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends $MISSING_PACKAGES
        else
          echo "All required packages already installed"
        fi
    
    - name: Download and setup GCC ARM toolchain
      if: steps.cache-gcc-arm.outputs.cache-hit != 'true'
      run: |
        cd ~
        wget https://launchpad.net/gcc-arm-embedded/4.7/4.7-2013-q3-update/+download/gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2
        tar xjf gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2
    
    - name: Setup GCC ARM toolchain in PATH
      run: |
        echo "$HOME/gcc-arm-none-eabi-4_7-2013q3/bin" >> $GITHUB_PATH
    
    - name: Install Python dependencies
      run: |
        cd ./scripts
        python3 -m pip install --upgrade pip
        python3 -m pip install GitPython --upgrade
    
    - name: Verify toolchain installation
      run: |
        arm-none-eabi-gcc --version
        which arm-none-eabi-gcc
    
    - name: Build libopencm3
      run: |
        cd ./libopencm3
        make clean
        make -j$(nproc)
        sudo make install
    
    - name: Build firmware
      run: |
        make clean
        make -j$(nproc)
    
    - name: Extract firmware version
      run: |
        VERSION=$(grep '#define HYDRASDR_FW_GIT_TAG' m0/m0.hdr | sed 's/.*"\([^"]*\)".*/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Firmware version: $VERSION"
    
    - name: Download rfone_host release assets
      run: |
        echo "Downloading RFOne Host Tools..."
        
        if ! RELEASE_INFO=$(curl -s https://api.github.com/repos/hydrasdr/rfone_host/releases/latest); then
          echo "❌ Failed to fetch release info from GitHub API"
          echo "RFONE_HOST_VERSION=none" >> $GITHUB_ENV  
          echo "RFONE_HOST_AVAILABLE=false" >> $GITHUB_ENV
          exit 0
        fi
        
        if echo "$RELEASE_INFO" | jq . >/dev/null 2>&1; then
          HOST_VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name // "none"')
        else
          echo "❌ Invalid API response"
          HOST_VERSION="none"
        fi
        
        if [ "$HOST_VERSION" = "none" ] || [ "$HOST_VERSION" = "null" ] || [ -z "$HOST_VERSION" ]; then
          echo "❌ No valid rfone_host release found"
          echo "RFONE_HOST_VERSION=none" >> $GITHUB_ENV  
          echo "RFONE_HOST_AVAILABLE=false" >> $GITHUB_ENV
          exit 0
        fi
        
        echo "✓ Found rfone_host release: $HOST_VERSION"
        echo "RFONE_HOST_VERSION=$HOST_VERSION" >> $GITHUB_ENV
        
        echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith(".zip")) | .name' > available_assets.txt
        
        if [ ! -s available_assets.txt ]; then
          echo "❌ No .zip assets found in release"
          echo "RFONE_HOST_AVAILABLE=false" >> $GITHUB_ENV
          exit 0
        fi
        
        echo "Available assets:"
        cat available_assets.txt
        
        mkdir -p rfone_host_binaries
        cd rfone_host_binaries
        
        DOWNLOADED_ASSETS=0
        
        while IFS= read -r asset; do
          if [ -z "$asset" ]; then
            continue
          fi
          
          download_url="https://github.com/hydrasdr/rfone_host/releases/download/$HOST_VERSION/$asset"
          echo "Processing: $asset"
          
          if [[ "$asset" =~ [Ww]indows ]] || [[ "$asset" =~ [Ww]in32 ]] || [[ "$asset" =~ [Ww]in64 ]]; then
            if curl -f -L -o "windows.zip" "$download_url"; then
              echo "✓ Windows tools downloaded"
              DOWNLOADED_ASSETS=$((DOWNLOADED_ASSETS + 1))
            fi
            
          elif [[ "$asset" =~ [Uu]buntu.*22 ]] || [[ "$asset" =~ 22\.04 ]]; then
            if curl -f -L -o "ubuntu-22.zip" "$download_url"; then
              echo "✓ Ubuntu 22.04 tools downloaded"
              DOWNLOADED_ASSETS=$((DOWNLOADED_ASSETS + 1))
            fi
            
          elif [[ "$asset" =~ [Uu]buntu.*24 ]] || [[ "$asset" =~ 24\.04 ]]; then
            if curl -f -L -o "ubuntu-24.zip" "$download_url"; then
              echo "✓ Ubuntu 24.04 tools downloaded"
              DOWNLOADED_ASSETS=$((DOWNLOADED_ASSETS + 1))
            fi
            
          elif [[ "$asset" =~ [Ll]inux ]] && [[ ! "$asset" =~ [Uu]buntu ]]; then
            if curl -f -L -o "linux.zip" "$download_url"; then
              echo "✓ Generic Linux tools downloaded"
              DOWNLOADED_ASSETS=$((DOWNLOADED_ASSETS + 1))
            fi
          fi
        done < ../available_assets.txt
        
        echo "Extracting downloaded tools..."
        EXTRACTED_PLATFORMS=0
        
        for zipfile in *.zip; do
          if [ -f "$zipfile" ]; then
            dirname="${zipfile%.zip}"
            if unzip -q "$zipfile" -d "$dirname/"; then
              if find "$dirname" -name "*spiflash*" -type f | head -1 > /dev/null; then
                echo "✓ Extracted $dirname with spiflash binary"
                EXTRACTED_PLATFORMS=$((EXTRACTED_PLATFORMS + 1))
              fi
            fi
          fi
        done
        
        # Create fallback mappings for missing distributions
        if [ ! -d "ubuntu-22" ] && [ -d "linux" ]; then
          cp -r linux ubuntu-22
          echo "✓ Using generic linux tools for Ubuntu 22.04"
          EXTRACTED_PLATFORMS=$((EXTRACTED_PLATFORMS + 1))
        fi
        
        if [ ! -d "ubuntu-24" ] && [ -d "linux" ]; then
          cp -r linux ubuntu-24  
          echo "✓ Using generic linux tools for Ubuntu 24.04"
          EXTRACTED_PLATFORMS=$((EXTRACTED_PLATFORMS + 1))
        fi
        
        if [ $EXTRACTED_PLATFORMS -gt 0 ]; then
          echo "✓ Successfully extracted $EXTRACTED_PLATFORMS platform(s)"
          echo "RFONE_HOST_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "❌ No host tools successfully extracted"
          echo "RFONE_HOST_AVAILABLE=false" >> $GITHUB_ENV
        fi
    
    - name: Create package
      run: |
        PACKAGE_DIR="hydrasdr-rfone-firmware-${{ env.VERSION }}"
        mkdir -p "$PACKAGE_DIR"
        
        echo "Creating package: $PACKAGE_DIR"
        
        # Include firmware
        if [ -f "fw_bin/hydrasdr_rfone_fw.bin" ]; then
          cp fw_bin/hydrasdr_rfone_fw.bin "$PACKAGE_DIR/"
          echo "✓ Firmware binary included"
        else
          echo "❌ ERROR: Firmware binary not found!"
          exit 1
        fi
        
        # Include DFU tools if available
        if [ -d "fw_bin/dfuprog_hydrasdr" ]; then
          cp -r fw_bin/dfuprog_hydrasdr "$PACKAGE_DIR/"
          echo "✓ DFU tools included"
        fi
        
        # Include platform-specific host tools
        INCLUDED_PLATFORMS=""
        
        if [ -d "rfone_host_binaries/windows" ]; then
          cp -r rfone_host_binaries/windows "$PACKAGE_DIR/"
          echo "✓ Windows host tools included"
          INCLUDED_PLATFORMS="$INCLUDED_PLATFORMS windows"
        fi
        
        if [ -d "rfone_host_binaries/ubuntu-22" ]; then
          cp -r rfone_host_binaries/ubuntu-22 "$PACKAGE_DIR/"
          echo "✓ Ubuntu 22.04 host tools included"
          INCLUDED_PLATFORMS="$INCLUDED_PLATFORMS ubuntu-22"
        fi
        
        if [ -d "rfone_host_binaries/ubuntu-24" ]; then
          cp -r rfone_host_binaries/ubuntu-24 "$PACKAGE_DIR/"
          echo "✓ Ubuntu 24.04 host tools included"
          INCLUDED_PLATFORMS="$INCLUDED_PLATFORMS ubuntu-24"
        fi
        
        # Set environment variables for later steps
        if [ -n "$INCLUDED_PLATFORMS" ]; then
          echo "HOST_TOOLS_INCLUDED=true" >> $GITHUB_ENV
          echo "INCLUDED_PLATFORMS=$INCLUDED_PLATFORMS" >> $GITHUB_ENV
          echo "✓ Host tools included for:$INCLUDED_PLATFORMS"
        else
          echo "HOST_TOOLS_INCLUDED=false" >> $GITHUB_ENV
          echo "INCLUDED_PLATFORMS=" >> $GITHUB_ENV
          echo "⚠ No host tools included - firmware-only package"
        fi
    
    - name: Create flash scripts
      run: |
        PACKAGE_DIR="hydrasdr-rfone-firmware-${{ env.VERSION }}"
        
        # Windows flash script
        cat > "$PACKAGE_DIR/flash_firmware_windows.bat" << 'WINEOF'
        @echo off
        echo HydraSDR RFOne Firmware Flash Tool
        echo ===================================
        echo.
        echo Prerequisites:
        echo - HydraSDR RFOne connected via USB
        echo - Device in normal operation mode (not DFU mode)
        echo.
        
        if exist "windows\hydrasdr_spiflash.exe" (
            echo Host tools found - ready to flash
            echo.
            pause
            echo Flashing firmware...
            windows\hydrasdr_spiflash.exe -w hydrasdr_rfone_fw.bin
            if errorlevel 1 (
                echo Flash failed!
            ) else (
                echo Flash successful!
                if exist "windows\hydrasdr_reset.exe" (
                    windows\hydrasdr_reset.exe
                )
            )
        ) else (
            echo Host tools not included in this package.
            echo Please download from: https://github.com/hydrasdr/rfone_host
            echo Then use: hydrasdr_spiflash.exe -w hydrasdr_rfone_fw.bin
        )
        pause
        WINEOF

        # Linux flash script
        cat > "$PACKAGE_DIR/flash_firmware_linux.sh" << 'LINEOF'
        #!/bin/bash
        echo "HydraSDR RFOne Firmware Flash Tool"
        echo "=================================="
        echo
        echo "Prerequisites:"
        echo "- HydraSDR RFOne connected via USB"
        echo "- Device in normal operation mode (not DFU mode)"
        echo "- Appropriate USB permissions (may need sudo)"
        echo

        # Determine which Ubuntu version tools to use
        BINARY_DIR=""
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            echo "Detected OS: $NAME $VERSION_ID"
            case "$VERSION_ID" in
                "22.04") 
                    if [ -d "ubuntu-22" ]; then
                        BINARY_DIR="ubuntu-22"
                        echo "Using ubuntu-22 tools for Ubuntu 22.04"
                    fi
                    ;;
                "24.04") 
                    if [ -d "ubuntu-24" ]; then
                        BINARY_DIR="ubuntu-24"
                        echo "Using ubuntu-24 tools for Ubuntu 24.04"
                    fi
                    ;;
            esac
        fi

        # Fallback to newest available tools
        if [ -z "$BINARY_DIR" ]; then
            if [ -d "ubuntu-24" ]; then
                BINARY_DIR="ubuntu-24"
                echo "Using ubuntu-24 tools as fallback"
            elif [ -d "ubuntu-22" ]; then
                BINARY_DIR="ubuntu-22"
                echo "Using ubuntu-22 tools as fallback"
            fi
        fi

        if [ -n "$BINARY_DIR" ] && [ -f "$BINARY_DIR/hydrasdr_spiflash" ]; then
            echo "Host tools found in $BINARY_DIR - ready to flash"
            echo
            read -p "Press Enter to continue..."
            echo "Flashing firmware..."
            chmod +x "$BINARY_DIR/hydrasdr_spiflash"
            ./"$BINARY_DIR/hydrasdr_spiflash" -w hydrasdr_rfone_fw.bin
            if [ $? -eq 0 ]; then
                echo "Flash successful!"
                if [ -f "$BINARY_DIR/hydrasdr_reset" ]; then
                    chmod +x "$BINARY_DIR/hydrasdr_reset"
                    ./"$BINARY_DIR/hydrasdr_reset"
                    echo "Device reset!"
                fi
            else
                echo "Flash failed!"
                echo "Try running with sudo if you get permission errors."
            fi
        else
            echo "Host tools not included in this package."
            echo "Available tools should be downloaded from:"
            echo "https://github.com/hydrasdr/rfone_host/releases"
            echo
            echo "Manual flash command:"
            echo "  ./hydrasdr_spiflash -w hydrasdr_rfone_fw.bin"
        fi
        LINEOF
        
        chmod +x "$PACKAGE_DIR/flash_firmware_linux.sh"
    
    - name: Create README
      run: |
        PACKAGE_DIR="hydrasdr-rfone-firmware-${{ env.VERSION }}"
        
        # Check what platforms are actually included and build manual section
        MANUAL_SECTION=""
        if [ -d "$PACKAGE_DIR/windows" ] || [ -d "$PACKAGE_DIR/ubuntu-22" ] || [ -d "$PACKAGE_DIR/ubuntu-24" ]; then
          MANUAL_SECTION="## Manual Flashing

        Host tools are included for:"
          
          if [ -d "$PACKAGE_DIR/windows" ]; then
            MANUAL_SECTION="$MANUAL_SECTION
        - Windows: \`windows\\\\hydrasdr_spiflash.exe -w hydrasdr_rfone_fw.bin\`"
          fi
          
          if [ -d "$PACKAGE_DIR/ubuntu-22" ]; then
            MANUAL_SECTION="$MANUAL_SECTION
        - Ubuntu 22.04: \`./ubuntu-22/hydrasdr_spiflash -w hydrasdr_rfone_fw.bin\`"
          fi
          
          if [ -d "$PACKAGE_DIR/ubuntu-24" ]; then
            MANUAL_SECTION="$MANUAL_SECTION
        - Ubuntu 24.04: \`./ubuntu-24/hydrasdr_spiflash -w hydrasdr_rfone_fw.bin\`"
          fi
        else
          MANUAL_SECTION="## Manual Flashing

        ⚠️ **Host tools not included in this package**

        Download host tools from: https://github.com/hydrasdr/rfone_host/releases
        Then use: \`./hydrasdr_spiflash -w hydrasdr_rfone_fw.bin\`"
        fi
        
        cat > "$PACKAGE_DIR/README.md" << READMEEOF
        # HydraSDR RFOne Firmware ${{ env.VERSION }}

        ## Quick Start

        ### Windows
        Double-click \`flash_firmware_windows.bat\`

        ### Linux  
        Run \`./flash_firmware_linux.sh\` (auto-detects Ubuntu version)

        $MANUAL_SECTION

        ## Prerequisites
        - HydraSDR RFOne connected via USB
        - Device in normal operation mode (not DFU mode)
        - On Linux: appropriate USB permissions (may need sudo)

        ## Resources
        - Firmware: https://github.com/hydrasdr/rfone_fw
        - Host Tools: https://github.com/hydrasdr/rfone_host
        - Host Tools Flash Documentation: https://github.com/hydrasdr/rfone_host/blob/main/hydrasdr-tools/hydrasdr_tools_readme.md#hydrasdr_spiflash
        - Website: https://hydrasdr.com
        READMEEOF
    
    - name: Create archives
      run: |
        PACKAGE_DIR="hydrasdr-rfone-firmware-${{ env.VERSION }}"
        
        echo "Creating archives..."
        
        # Create complete archive with all platforms (without extra directory level)
        cd "$PACKAGE_DIR"
        zip -r "../hydrasdr-rfone-firmware-${{ env.VERSION }}-complete.zip" .
        cd ..
        echo "✓ Created complete archive"
        
        # Create platform-specific archives if host tools are included
        if [ "${{ env.HOST_TOOLS_INCLUDED }}" = "true" ]; then
          
          # Windows-specific archive
          if [[ "${{ env.INCLUDED_PLATFORMS }}" == *"windows"* ]]; then
            mkdir -p "windows-release"
            cp "$PACKAGE_DIR/hydrasdr_rfone_fw.bin" "windows-release/"
            cp "$PACKAGE_DIR/flash_firmware_windows.bat" "windows-release/"
            cp "$PACKAGE_DIR/README.md" "windows-release/"
            cp -r "$PACKAGE_DIR/windows" "windows-release/"
            if [ -d "$PACKAGE_DIR/dfuprog_hydrasdr" ]; then
              cp -r "$PACKAGE_DIR/dfuprog_hydrasdr" "windows-release/"
            fi
            
            cd "windows-release"
            zip -r "../hydrasdr-rfone-firmware-${{ env.VERSION }}-windows.zip" .
            cd ..
            echo "✓ Created Windows archive"
          fi
          
          # Ubuntu 22.04 archive
          if [[ "${{ env.INCLUDED_PLATFORMS }}" == *"ubuntu-22"* ]]; then
            mkdir -p "ubuntu-22-release"
            cp "$PACKAGE_DIR/hydrasdr_rfone_fw.bin" "ubuntu-22-release/"
            cp "$PACKAGE_DIR/flash_firmware_linux.sh" "ubuntu-22-release/"
            cp "$PACKAGE_DIR/README.md" "ubuntu-22-release/"
            cp -r "$PACKAGE_DIR/ubuntu-22" "ubuntu-22-release/"
            
            tar -czf "hydrasdr-rfone-firmware-${{ env.VERSION }}-ubuntu-22.04.tar.gz" -C "ubuntu-22-release" .
            echo "✓ Created Ubuntu 22.04 archive"
          fi
          
          # Ubuntu 24.04 archive
          if [[ "${{ env.INCLUDED_PLATFORMS }}" == *"ubuntu-24"* ]]; then
            mkdir -p "ubuntu-24-release"
            cp "$PACKAGE_DIR/hydrasdr_rfone_fw.bin" "ubuntu-24-release/"
            cp "$PACKAGE_DIR/flash_firmware_linux.sh" "ubuntu-24-release/"
            cp "$PACKAGE_DIR/README.md" "ubuntu-24-release/"
            cp -r "$PACKAGE_DIR/ubuntu-24" "ubuntu-24-release/"
            
            tar -czf "hydrasdr-rfone-firmware-${{ env.VERSION }}-ubuntu-24.04.tar.gz" -C "ubuntu-24-release" .
            echo "✓ Created Ubuntu 24.04 archive"
          fi
        fi
        
        # Show created archives
        echo "Created archives:"
        ls -la *.zip *.tar.gz 2>/dev/null || echo "No additional archives created"
    
    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hydrasdr-rfone-firmware-${{ env.VERSION }}
        path: |
          hydrasdr-rfone-firmware-${{ env.VERSION }}/*
          *.zip
          *.tar.gz
        retention-days: 30

  update_nightly_release:
    runs-on: ubuntu-24.04
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: hydrasdr-rfone-firmware-*
        merge-multiple: true
        path: ./artifacts
    
    - name: Extract firmware version
      run: |
        VERSION_FILE=$(find ./artifacts -name "*.zip" | head -1)
        if [ -n "$VERSION_FILE" ]; then
          FULL_VERSION=$(basename "$VERSION_FILE" .zip | sed 's/hydrasdr-rfone-firmware-//')
          BASE_VERSION=$(echo "$FULL_VERSION" | sed 's/-complete$//' | sed 's/-windows$//' | sed 's/-ubuntu-[0-9][0-9]\.[0-9][0-9]$//')
          echo "VERSION=$BASE_VERSION" >> $GITHUB_ENV
          echo "Detected version: $BASE_VERSION"
        else
          echo "VERSION=unknown" >> $GITHUB_ENV
        fi
    
    - name: Generate release notes
      run: |
        TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        
        cat > release_notes.md << 'NOTEEOF'
        # HydraSDR RFOne Nightly Firmware
        NOTEEOF
        
        echo "" >> release_notes.md
        echo "**Version:** ${{ env.VERSION }}" >> release_notes.md
        echo "**Built:** $TIMESTAMP" >> release_notes.md
        echo "**Commit:** [\`$COMMIT_SHORT\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> release_notes.md
        echo "**Message:** $COMMIT_MSG" >> release_notes.md
        echo "" >> release_notes.md
        echo "## ⚠️ Development Build" >> release_notes.md
        echo "This is an automated nightly build. Use at your own risk!" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Available Downloads" >> release_notes.md
        
        # List available archives
        COMPLETE_ARCHIVE=$(find ./artifacts -name "*-complete.zip" | head -1)
        if [ -n "$COMPLETE_ARCHIVE" ]; then
          COMPLETE_NAME=$(basename "$COMPLETE_ARCHIVE")
          if find ./artifacts -name "*-windows.zip" | head -1 > /dev/null || \
             find ./artifacts -name "*-ubuntu-*.tar.gz" | head -1 > /dev/null; then
            echo "- **$COMPLETE_NAME** - All platforms included" >> release_notes.md
          else
            echo "- **$COMPLETE_NAME** - Firmware only (no host tools available)" >> release_notes.md
          fi
        fi
        
        WINDOWS_ARCHIVE=$(find ./artifacts -name "*-windows.zip" | head -1)
        if [ -n "$WINDOWS_ARCHIVE" ]; then
          echo "- **$(basename "$WINDOWS_ARCHIVE")** - Windows tools only" >> release_notes.md
        fi
        
        UBUNTU22_ARCHIVE=$(find ./artifacts -name "*-ubuntu-22.04.tar.gz" | head -1)
        if [ -n "$UBUNTU22_ARCHIVE" ]; then
          echo "- **$(basename "$UBUNTU22_ARCHIVE")** - Ubuntu 22.04 LTS tools" >> release_notes.md
        fi
        
        UBUNTU24_ARCHIVE=$(find ./artifacts -name "*-ubuntu-24.04.tar.gz" | head -1)
        if [ -n "$UBUNTU24_ARCHIVE" ]; then
          echo "- **$(basename "$UBUNTU24_ARCHIVE")** - Ubuntu 24.04 LTS tools" >> release_notes.md
        fi
        
        cat >> release_notes.md << 'NOTEEOF2'

        ## Quick Flash
        1. Download the appropriate package for your platform
        2. Extract it  
        3. Run the flash script:
           - **Windows**: Double-click `flash_firmware_windows.bat`
           - **Linux**: Run `./flash_firmware_linux.sh`

        ## Resources
        - [Firmware Repository](https://github.com/hydrasdr/rfone_fw)
        - [Host Tools](https://github.com/hydrasdr/rfone_host)
        - [Host Tools Flash Documentation](https://github.com/hydrasdr/rfone_host/blob/main/hydrasdr-tools/hydrasdr_tools_readme.md#hydrasdr_spiflash)
        - [Website](https://hydrasdr.com)
        NOTEEOF2
    
    - name: Delete and create nightly release
      run: |
        gh release delete nightly -R ${{ github.repository }} --yes || echo "No existing nightly release"
        
        TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
        gh release create nightly \
          -R ${{ github.repository }} \
          --title "Nightly Build ($TIMESTAMP)" \
          --notes-file release_notes.md \
          --prerelease
    
    - name: Upload archives to release
      run: |
        echo "Uploading archives to nightly release..."
        
        find ./artifacts -name "*.zip" -exec gh release upload nightly {} -R ${{ github.repository }} \;
        find ./artifacts -name "*.tar.gz" -exec gh release upload nightly {} -R ${{ github.repository }} \;
        
        echo "Upload complete!"